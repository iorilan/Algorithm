题目描述：

Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0

给定已排序的数组，试图找到值为target的索引，如果没有找到，则返回它能够插入的位置，使得插入后数组仍为升序。

思路：

本题依然是二分法，只是要添加对插入的处理。

实现代码：

public class Solution {
    public int SearchInsert(int[] nums, int target) 
    {
        var l = 0;
    	var r = nums.Length - 1;
    	
    	while(l < r - 1){
    		var m = (l + r) / 2;
    		
    		var i = GetEqualsIndex(target, nums, new[]{l,r,m});
    		if(i != -1){
    			return i;
    		}
    		
    		if(target > nums[m]){
    			l = m;
    		}
    		else{
    			r = m;
    		}
    	}
    	
    	var index = GetEqualsIndex(target, nums, new[]{l,r});
    	if(index != -1){
    		return index;
    	}
    	if(target < nums[l]){
    		return l > 0 ? l - 1 : 0;
    	}
    	else if(target > nums[r]){
    		return r + 1;
    	}
    	else{
    		return l + 1;
    	}
	
    }
    
    private int GetEqualsIndex(int target, int[] nums, int[] indexes)
    {
    	foreach(var i in indexes){
    		if(nums[i] == target){
    			return i;
    		}
    	}
    	
    	return -1;
    }
    
}